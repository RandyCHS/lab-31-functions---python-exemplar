{"entries":[{"timestamp":1743790773501,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":281,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1743564701426,"editorVersion":"2.0.46","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"# Constants\nENEMY_COLS: number = 4\nENEMY_ROWS: number = 3\nFOOD_DROP_INTERVAL: number = 5000\nFOOD_VELOCITY: number = 50\nMAX_FOOD_SCORE: number = 1000\nMAX_SPRITE_DISTANCE: number = 200\nPROJECTILE_VELOCITY: number = -25\n\n# Global variables\nhero_sprite: Sprite = None\n\n# Functions\ndef calculate_score(food: Sprite):\n    # Calculate distance between two sprites (Pythagorean theorem).\n    # Calculate percentage out of maximum possible distance (200 pixels).\n    # Multiply percentage by maximum score.\n    return (MAX_SPRITE_DISTANCE - Math.sqrt(\n        (food.x - hero_sprite.x)**2 + (food.y - hero_sprite.y)**2\n    )) / MAX_SPRITE_DISTANCE * MAX_FOOD_SCORE\n\n# Simplified version\ndef create_enemies(rows: number, columns: number):\n    enemy_image: Image = assets.image(\"\"\"coin\"\"\")\n    x: number = (screen.width - enemy_image.width * columns) / 2\n    y: number = enemy_image.height / 2\n    # Instead of looping here, call the enhanced version.\n    create_sprite_grid(rows, columns, enemy_image, x, y, SpriteKind.enemy, 0, 0, 0, 0)\n\n# Enhanced version\ndef create_sprite_grid(rows: number, columns: number, image: Image,\nstart_x: number, start_y: number, kind: number, vx: number, vy: number,\npadding_x: number, padding_y: number):\n    x: number = start_x\n    y: number = start_y\n    for r in range(rows):\n        for c in range(columns):\n            s: Sprite = sprites.create(image, kind)\n            s.set_position(x, y)\n            x += image.width + padding_x\n        x = start_x\n        y += image.height + padding_y\n\ndef create_hero_sprite():\n    global hero_sprite\n    hero_sprite = sprites.create(assets.image(\"\"\"hero\"\"\"), SpriteKind.player)\n    hero_sprite.set_position(80, 100)\n    hero_sprite.set_flag(SpriteFlag.STAY_IN_SCREEN, True)\n    controller.move_sprite(hero_sprite)\n    info.set_score(0)\n\ndef drop_food():\n    food = sprites.create_projectile_from_side(assets.image(\"\"\"apple\"\"\"), 0, FOOD_VELOCITY)\n    food.set_kind(SpriteKind.food)\n    food.x = Math.random_range(8, 152)\n\ndef fire_projectile():\n    projectile = sprites.create_projectile_from_sprite(assets.image(\"\"\"projectile\"\"\"),\n        hero_sprite, 0, PROJECTILE_VELOCITY)\n\n# Event handlers\ncontroller.A.on_event(ControllerButtonEvent.PRESSED, fire_projectile)\n\ngame.on_update_interval(FOOD_DROP_INTERVAL, drop_food)\n\ndef on_projectile_food_overlap(projectile: Sprite, food_sprite: Sprite):\n    info.change_score_by(calculate_score(food_sprite))\n    projectile.destroy()\n    food_sprite.destroy(effects.spray, 250)\nsprites.on_overlap(SpriteKind.projectile, SpriteKind.food, on_projectile_food_overlap)\n\n# on start\ncreate_hero_sprite()\ncreate_enemies(ENEMY_ROWS, ENEMY_COLS)\n","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAA7gAAAAAAAODuAAAAAAAA7u4AAAAAAADv7gAAAAAA4O/uAAAAAADsL+4AAAAA7kwsIszMz+9OTEwi3b1PT1VCQkQAAAAAIlJCRAAAAAAAIk9EAAAAAAAgX0UAAAAAAABCVAAAAAAAACJEAAAAAAAAICIAAAAAAAAAIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAgAAAAAAAFQlAAAAAAAAVCUAAAAAAABAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"projectile\"\n    },\n    \"image3\": {\n        \"data\": \"hwQIAAgAAAAAu8wAsFXVD1s90/1bUxX9W1MV/Vsd0f2wVd0PALvMAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"coin\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAMDMzAwAAADA7O7u7gIAAOzu7u7uLgAA7u4iIuLuAuDuLiIiIuIC4O4iIiIiIi7g7i4iIiIiLs7MLCIiIiLkfGcsIiIiIuR37iIiIiIi5ODiRCIiIkLi4CJVJCIiQg4ALlQkIiIkDgAuIiIiROIAAOAuIiLiDgAAAODu7g4AAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"apple\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Lab 3.1: Functions - Python (exemplar)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v1.8.20\",\n        \"tag\": \"v1.8.20\",\n        \"commits\": \"https://github.com/microsoft/pxt-arcade/commits/dd914bb70406150e2d737c738b763f1145833e1b\",\n        \"target\": \"1.8.20\",\n        \"pxt\": \"7.4.24\"\n    },\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1743618136031,"editorVersion":"2.0.46","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"# Constants\nENEMY_COLS: number = 4\nENEMY_ROWS: number = 3\nFOOD_DROP_INTERVAL: number = 5000\nFOOD_VELOCITY: number = 50\nMAX_FOOD_SCORE: number = 1000\nMAX_SPRITE_DISTANCE: number = 200\nPROJECTILE_VELOCITY: number = -25\n\n# Global variables\nhero_sprite: Sprite = None\n\n# Functions\ndef calculate_score(food: Sprite):\n    # Calculate distance between two sprites (Pythagorean theorem).\n    # Calculate percentage out of maximum possible distance (200 pixels).\n    # Multiply percentage by maximum score.\n    return (MAX_SPRITE_DISTANCE - Math.sqrt(\n        (food.x - hero_sprite.x)**2 + (food.y - hero_sprite.y)**2\n    )) / MAX_SPRITE_DISTANCE * MAX_FOOD_SCORE\n\n# Simplified version\ndef create_enemies(rows: number, columns: number):\n    enemy_image: Image = assets.image(\"\"\"coin\"\"\")\n    x: number = (screen.width - enemy_image.width * columns) / 2\n    y: number = enemy_image.height / 2\n    # Instead of looping here, call the enhanced version.\n    create_sprite_grid(rows, columns, enemy_image, x, y, SpriteKind.enemy, 0, 0, 0, 0)\n\n# Enhanced version\ndef create_sprite_grid(rows: number, columns: number, image: Image,\nstart_x: number, start_y: number, kind: number, vx: number, vy: number,\npadding_x: number, padding_y: number):\n    x: number = start_x\n    y: number = start_y\n    for r in range(rows):\n        for c in range(columns):\n            s: Sprite = sprites.create(image, kind)\n            s.set_position(x, y)\n            x += image.width + padding_x\n        x = start_x\n        y += image.height + padding_y\n\ndef create_hero_sprite():\n    global hero_sprite\n    hero_sprite = sprites.create(assets.image(\"\"\"hero\"\"\"), SpriteKind.player)\n    hero_sprite.set_position(80, 100)\n    hero_sprite.set_flag(SpriteFlag.STAY_IN_SCREEN, True)\n    controller.move_sprite(hero_sprite)\n    info.set_score(0)\n\ndef drop_food():\n    food = sprites.create_projectile_from_side(assets.image(\"\"\"apple\"\"\"), 0, FOOD_VELOCITY)\n    food.set_kind(SpriteKind.food)\n    food.x = Math.random_range(8, 152)\n\ndef fire_projectile():\n    projectile = sprites.create_projectile_from_sprite(assets.image(\"\"\"projectile\"\"\"),\n        hero_sprite, 0, PROJECTILE_VELOCITY)\n\n# Event handlers\ncontroller.A.on_event(ControllerButtonEvent.PRESSED, fire_projectile)\n\ngame.on_update_interval(FOOD_DROP_INTERVAL, drop_food)\n\ndef on_projectile_food_overlap(projectile: Sprite, food_sprite: Sprite):\n    info.change_score_by(calculate_score(food_sprite))\n    projectile.destroy()\n    food_sprite.destroy(effects.spray, 250)\nsprites.on_overlap(SpriteKind.projectile, SpriteKind.food, on_projectile_food_overlap)\n\n# on start\ncreate_hero_sprite()\ncreate_enemies(ENEMY_ROWS, ENEMY_COLS)\n","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAA7gAAAAAAAODuAAAAAAAA7u4AAAAAAADv7gAAAAAA4O/uAAAAAADsL+4AAAAA7kwsIszMz+9OTEwi3b1PT1VCQkQAAAAAIlJCRAAAAAAAIk9EAAAAAAAgX0UAAAAAAABCVAAAAAAAACJEAAAAAAAAICIAAAAAAAAAIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAgAAAAAAAFQlAAAAAAAAVCUAAAAAAABAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"projectile\"\n    },\n    \"image3\": {\n        \"data\": \"hwQIAAgAAAAAu8wAsFXVD1s90/1bUxX9W1MV/Vsd0f2wVd0PALvMAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"coin\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAMDMzAwAAADA7O7u7gIAAOzu7u7uLgAA7u4iIuLuAuDuLiIiIuIC4O4iIiIiIi7g7i4iIiIiLs7MLCIiIiLkfGcsIiIiIuR37iIiIiIi5ODiRCIiIkLi4CJVJCIiQg4ALlQkIiIkDgAuIiIiROIAAOAuIiLiDgAAAODu7g4AAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"apple\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Lab 3.1: Functions - Python (exemplar)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v1.8.20\",\n        \"tag\": \"v1.8.20\",\n        \"commits\": \"https://github.com/microsoft/pxt-arcade/commits/dd914bb70406150e2d737c738b763f1145833e1b\",\n        \"target\": \"1.8.20\",\n        \"pxt\": \"7.4.24\"\n    },\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}},{"timestamp":1743790773501,"editorVersion":"2.0.46","text":{"main.ts":"","README.md":" ","assets.json":"","main.py":"# Constants\nENEMY_COLS: number = 4\nENEMY_ROWS: number = 3\nFOOD_DROP_INTERVAL: number = 5000\nFOOD_VELOCITY: number = 50\nMAX_FOOD_SCORE: number = 1000\nMAX_SPRITE_DISTANCE: number = 200\nPROJECTILE_VELOCITY: number = -25\n\n# Global variables\nhero_sprite: Sprite = None\n\n# Functions\ndef calculate_score(food: Sprite):\n    # Calculate distance between two sprites (Pythagorean theorem).\n    # Calculate percentage out of maximum possible distance (200 pixels).\n    # Multiply percentage by maximum score.\n    return (MAX_SPRITE_DISTANCE - Math.sqrt(\n        (food.x - hero_sprite.x)**2 + (food.y - hero_sprite.y)**2\n    )) / MAX_SPRITE_DISTANCE * MAX_FOOD_SCORE\n\n# Simplified version\ndef create_enemies(rows: number, columns: number):\n    enemy_image: Image = assets.image(\"\"\"coin\"\"\")\n    x: number = (screen.width - enemy_image.width * columns) / 2\n    y: number = enemy_image.height / 2\n    # Instead of looping here, call the enhanced version.\n    create_sprite_grid(rows, columns, enemy_image, x, y, SpriteKind.enemy, 0, 0, 0, 0)\n\n# Enhanced version\ndef create_sprite_grid(rows: number, columns: number, image: Image,\nstart_x: number, start_y: number, kind: number, vx: number, vy: number,\npadding_x: number, padding_y: number):\n    x: number = start_x\n    y: number = start_y\n    for r in range(rows):\n        for c in range(columns):\n            s: Sprite = sprites.create(image, kind)\n            s.set_position(x, y)\n            x += image.width + padding_x\n        x = start_x\n        y += image.height + padding_y\n\ndef create_hero_sprite():\n    global hero_sprite\n    hero_sprite = sprites.create(assets.image(\"\"\"hero\"\"\"), SpriteKind.player)\n    hero_sprite.set_position(80, 100)\n    hero_sprite.set_flag(SpriteFlag.STAY_IN_SCREEN, True)\n    controller.move_sprite(hero_sprite)\n    info.set_score(0)\n\ndef drop_food():\n    food = sprites.create_projectile_from_side(assets.image(\"\"\"apple\"\"\"), 0, FOOD_VELOCITY)\n    food.set_kind(SpriteKind.food)\n    food.x = Math.random_range(8, 152)\n\ndef fire_projectile():\n    projectile = sprites.create_projectile_from_sprite(assets.image(\"\"\"projectile\"\"\"),\n        hero_sprite, 0, PROJECTILE_VELOCITY)\n\n# Event handlers\ncontroller.A.on_event(ControllerButtonEvent.PRESSED, fire_projectile)\n\ngame.on_update_interval(FOOD_DROP_INTERVAL, drop_food)\n\ndef on_projectile_food_overlap(projectile: Sprite, food_sprite: Sprite):\n    info.change_score_by(calculate_score(food_sprite))\n    projectile.destroy()\n    food_sprite.destroy(effects.spray, 250)\nsprites.on_overlap(SpriteKind.projectile, SpriteKind.food, on_projectile_food_overlap)\n\n# on start\ncreate_hero_sprite()\ncreate_enemies(ENEMY_ROWS, ENEMY_COLS)\n","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAA7gAAAAAAAODuAAAAAAAA7u4AAAAAAADv7gAAAAAA4O/uAAAAAADsL+4AAAAA7kwsIszMz+9OTEwi3b1PT1VCQkQAAAAAIlJCRAAAAAAAIk9EAAAAAAAgX0UAAAAAAABCVAAAAAAAACJEAAAAAAAAICIAAAAAAAAAIg==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAgAAAAAAAFQlAAAAAAAAVCUAAAAAAABAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"projectile\"\n    },\n    \"image3\": {\n        \"data\": \"hwQIAAgAAAAAu8wAsFXVD1s90/1bUxX9W1MV/Vsd0f2wVd0PALvMAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"coin\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAMDMzAwAAADA7O7u7gIAAOzu7u7uLgAA7u4iIuLuAuDuLiIiIuIC4O4iIiIiIi7g7i4iIiIiLs7MLCIiIiLkfGcsIiIiIuR37iIiIiIi5ODiRCIiIkLi4CJVJCIiQg4ALlQkIiIkDgAuIiIiROIAAOAuIiLiDgAAAODu7g4AAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"apple\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Lab 3.1: Functions - Python (exemplar)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v1.8.20\",\n        \"tag\": \"v1.8.20\",\n        \"commits\": \"https://github.com/microsoft/pxt-arcade/commits/dd914bb70406150e2d737c738b763f1145833e1b\",\n        \"target\": \"1.8.20\",\n        \"pxt\": \"7.4.24\"\n    },\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\"\n}\n"}}],"shares":[{"id":"13652-05160-87660-26654","timestamp":1743564701427}],"lastSaveTime":1743790773506}